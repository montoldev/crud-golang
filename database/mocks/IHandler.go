// Code generated by MockGen. DO NOT EDIT.
// Source: ./handler.go

// Package mock_database is a generated GoMock package.
package mock_database

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIDatabase is a mock of IDatabase interface.
type MockIDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockIDatabaseMockRecorder
}

// MockIDatabaseMockRecorder is the mock recorder for MockIDatabase.
type MockIDatabaseMockRecorder struct {
	mock *MockIDatabase
}

// NewMockIDatabase creates a new mock instance.
func NewMockIDatabase(ctrl *gomock.Controller) *MockIDatabase {
	mock := &MockIDatabase{ctrl: ctrl}
	mock.recorder = &MockIDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIDatabase) EXPECT() *MockIDatabaseMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockIDatabase) Delete(ctx context.Context, tableName, condition string, args ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, tableName, condition}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockIDatabaseMockRecorder) Delete(ctx, tableName, condition interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, tableName, condition}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIDatabase)(nil).Delete), varargs...)
}

// GetOne mocks base method.
func (m *MockIDatabase) GetOne(ctx context.Context, tableName string, result interface{}, condition string, args ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, tableName, result, condition}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetOne", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetOne indicates an expected call of GetOne.
func (mr *MockIDatabaseMockRecorder) GetOne(ctx, tableName, result, condition interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, tableName, result, condition}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOne", reflect.TypeOf((*MockIDatabase)(nil).GetOne), varargs...)
}

// Insert mocks base method.
func (m *MockIDatabase) Insert(ctx context.Context, tableName string, data interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, tableName, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockIDatabaseMockRecorder) Insert(ctx, tableName, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockIDatabase)(nil).Insert), ctx, tableName, data)
}

// Update mocks base method.
func (m *MockIDatabase) Update(ctx context.Context, tableName string, data interface{}, condition string, args ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, tableName, data, condition}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Update", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockIDatabaseMockRecorder) Update(ctx, tableName, data, condition interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, tableName, data, condition}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIDatabase)(nil).Update), varargs...)
}
